import { Array, HArray as _HArray, Constructor } from '../../DataStructure/Mutable/Array';
import { Functor1 } from '../../Typeclass/Data/Functor';
import { Apply1 } from '../../Typeclass/Control/Apply';
import { Applicative1 } from '../../Typeclass/Control/Applicative';
import { Bind1 } from '../../Typeclass/Control/Bind';
import { Monad1 } from '../../Typeclass/Control/Monad';
import { Populatable1 } from '../../Typeclass/Data/Populatable';
export * from '../../DataStructure/Mutable/Array';
declare let fmap: <A, B>(_: (_: A) => B) => (_: Array<A>) => Array<B>;
export { fmap };
declare let ap: <A, B>(_: Array<(_: A) => B>) => (_: Array<A>) => Array<B>;
export { ap };
declare let pure: <A>(_: A) => Array<A>;
export { pure };
declare let bind: <A>(_: Array<A>) => <B>(_: (_: A) => Array<B>) => Array<B>;
export { bind };
declare let seed: <A>() => Array<A>;
export { seed };
declare let populate: <A>(..._s: A[]) => (_: Array<A>) => Array<A>;
export { populate };
declare let Functor: Functor1<"Array"> & Functor1.Ext<"Array">;
export { Functor };
declare let Apply: Apply1<"Array"> & Apply1.Ext<"Array">;
export { Apply };
declare let Applicative: Applicative1<"Array">;
export { Applicative };
declare let Bind: Bind1<"Array"> & Bind1.Ext<"Array">;
export { Bind };
declare let Monad: Monad1<"Array"> & Monad1.Ext<"Array">;
export { Monad };
declare let Populatable: Populatable1<"Array">;
export { Populatable };
interface HArray extends _HArray {
    Functor: typeof Functor;
    Apply: typeof Apply;
    Applicative: typeof Applicative;
    Bind: typeof Bind;
    Monad: typeof Monad;
    Populatable: typeof Populatable;
    fmap: <A, B>(_: (_: A) => B) => (_: Array<A>) => Array<B>;
    ap: <A, B>(_: Array<(_: A) => B>) => (_: Array<A>) => Array<B>;
    pure: <A>(_: A) => Array<A>;
    bind: <A>(_: Array<A>) => <B>(_: (_: A) => Array<B>) => Array<B>;
    seed: <A>() => Array<A>;
    populate: <A>(..._s: A[]) => (_: Array<A>) => Array<A>;
}
export { HArray };
declare type _Array<A> = Array<A>;
declare let _Array: Constructor & HArray;
export { _Array as Array };
