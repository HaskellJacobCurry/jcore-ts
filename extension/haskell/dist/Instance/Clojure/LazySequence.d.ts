import { LazySequence, HLazySequence as _HLazySequence, Constructor } from '../../DataStructure/Clojure/LazySequence';
import { Functor1 } from '../../Typeclass/Data/Functor';
import { Apply1 } from '../../Typeclass/Control/Apply';
import { Applicative1 } from '../../Typeclass/Control/Applicative';
import { Bind1 } from '../../Typeclass/Control/Bind';
import { Monad1 } from '../../Typeclass/Control/Monad';
export * from '../../DataStructure/Clojure/LazySequence';
declare let fmap: <A, B>(_: (_: A) => B) => (_: LazySequence<A>) => LazySequence<B>;
export { fmap };
declare let ap: <A, B>(_: LazySequence<(_: A) => B>) => (_: LazySequence<A>) => LazySequence<B>;
export { ap };
declare let pure: <A>(_: A) => LazySequence<A>;
export { pure };
declare let bind: <A>(_: LazySequence<A>) => <B>(_: (_: A) => LazySequence<B>) => LazySequence<B>;
export { bind };
declare let Functor: Functor1<"LazySequence"> & Functor1.Ext<"LazySequence">;
export { Functor };
declare let Apply: Functor1<"LazySequence"> & Functor1.Ext<"LazySequence"> & Apply1.Base<"LazySequence"> & Apply1.Ext<"LazySequence">;
export { Apply };
declare let Applicative: Functor1<"LazySequence"> & Functor1.Ext<"LazySequence"> & Apply1.Base<"LazySequence"> & Apply1.Ext<"LazySequence"> & Applicative1.Base<"LazySequence">;
export { Applicative };
declare let Bind: Functor1<"LazySequence"> & Functor1.Ext<"LazySequence"> & Apply1.Base<"LazySequence"> & Apply1.Ext<"LazySequence"> & Bind1.Base<"LazySequence"> & Bind1.Ext<"LazySequence">;
export { Bind };
declare let Monad: Functor1<"LazySequence"> & Functor1.Ext<"LazySequence"> & Apply1.Base<"LazySequence"> & Apply1.Ext<"LazySequence"> & Applicative1.Base<"LazySequence"> & Bind1.Base<"LazySequence"> & Bind1.Ext<"LazySequence"> & Monad1.Ext<"LazySequence">;
export { Monad };
interface HLazySequence extends _HLazySequence {
    Functor: typeof Functor;
    Apply: typeof Apply;
    Applicative: typeof Applicative;
    Bind: typeof Bind;
    Monad: typeof Monad;
    fmap: <A, B>(_: (_: A) => B) => (_: LazySequence<A>) => LazySequence<B>;
    ap: <A, B>(_: LazySequence<(_: A) => B>) => (_: LazySequence<A>) => LazySequence<B>;
    pure: <A>(_: A) => LazySequence<A>;
    bind: <A>(_: LazySequence<A>) => <B>(_: (_: A) => LazySequence<B>) => LazySequence<B>;
}
export { HLazySequence };
declare type _LazySequence<A> = LazySequence<A>;
declare let _LazySequence: Constructor & HLazySequence;
export { _LazySequence as LazySequence };
